<head>
	<link rel="stylesheet" type="text/css" href="~/AllContent/Tema1/Polymorphism/Polymorphism.css" asp-append-version="true">

</head>

<body>
	<div class="MainText">
		<h1 class="TitleContent">Полиморфизм </h1>

		<div class="MarginTopTextCenter">
			<h4 class="TextCenter">Полиморфизм – это , проще говоря , наличие нескольких форм . То есть одна и та же сущность может выполнять разные операции в разных сценариях </h4>

			<h4 class="TextCenter">Полиморфизм часто называют третьим столпом ООП после инкапсуляции и наследования.</h4>
		</div>

		<div>
			<h3 class="SubjectTextCenter">Он имеет несколько аспектов:</h3>

			<ul class="TextCenter">
				<li>1.	Во время выполнения объекты производного класса могут обрабатываться как объекты базового класса а таких местах , как методы и коллекции или массивы.</li>
				<li>2.	Базовые классы могут определять и реализовывать виртуальные методы, а производные классы переопределять их.</li>
			</ul>

			<h4 class="TextCenter">Существует два разных типа полиморфизма:</h4>

			<ul class="TextCenter">
				<li>Полиморфизм во время компиляции / статический полиморфизм.</li>
				<li>Полиморфизм во время выполнения / динамический полиморфизм.</li>
			</ul>

		</div>

		<h4 class="TextCenter">Рассмотрим их по очереди.</h4>
    
		<div>
			<h3 class="SubjectTextCenter">Полиморфизм во время компиляции:</h3>

			<h4 class="TextCenter">Преимущества такого подхода:</h4>

			<ul class="TextCenter">
				<li>Повторное использование кода : Обобщения позволяют повторно использовать код для работы с различными типами данных , уменьшая дублирование кода.</li>
				<li>Усиленная типизация : Компилятор проверяет , что типы данных , используемые с обобщениями , совместимы , предыдущая ошибка во время выполнения.</li>
				<li>Улучшенная производительность – Поскольку типы данных известны во время компиляции , компилятор может оптимизировать код, что приводит к улучшению производительности.</li>
			</ul>

			<h4 class="TextCenter">Пример</h4>

			<img src="~/AllContent/Tema1/Polymorphism/image/Poly1.png">

			<h4 class="TextCenter">В методе main нужно ввести следующий код </h4>

			<img src="~/AllContent/Tema1/Polymorphism/image/Poly2.png">

			<h4 class="TextCenter">Результат</h4>

			<img src="~/AllContent/Tema1/Polymorphism/image/Poly3.png">

			<div class="TextCenter">

				<h4 class="TextCenter">В данном примере мы создаём класс MyClass и перегружаем в нём два оператора “-” и “+”, затем в методе main мы создаём несколько экземпляров класса и проверяем всё на работоспособность .</h4>

				<h4 class="TextCenter">Обратите внимание  - без перегрузки операторов вы не сможете применять их логику в ваших классах !</h4>
			</div>
		</div>

		<div>
			<h3 class="SubjectTextCenter">Полиморфизм во время выполнения </h3>

			<h4 class="TextCenter">Так – же в этом коде присутствует переопределение метода ToString . Этот метод возвращает строку со значением нашего результата. </h4>

			<img src="~/AllContent/Tema1/Polymorphism/image/Poly4.png">


		</div>

		<div>
			<h3 class="SubjectTextCenter">Абстрактные классы</h3>

			<h4 class="TextCenter">Абстрактные классы в C# используются для создания неполных классов, которые должны быть реализованы в производных классах. Они создаются с использованием ключевого слова abstract перед определением класса. Абстрактные классы могут содержать абстрактные методы, которые не имеют реализации и заканчиваются точкой с запятой. Производные классы должны реализовать все абстрактные методы родительского класса.</h4>

			<h4 class="TextCenter">Пример</h4>

			<img src="~/AllContent/Tema1/Polymorphism/image/Poly5.png">

			<h4 class="TextCenter">Результат</h4>

			<img src="~/AllContent/Tema1/Polymorphism/image/Poly6.png">
			
			<div>
				<h4 class="TextCenter">В данном примере мы создали класс dog унаследованный от абстрактного Animals , с переопределением метода eat.</h4>

				<h4 class="TextCenter">Запомните! У абстрактного класса не может быть никакой логики и создать его экземпляр невозможно! Так – же не стоит путать абстрактные классы и интерфейсы!</h4>
			</div>
		</div>
	</div>
</body>
